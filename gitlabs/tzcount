#!/usr/bin/env python3
import subprocess #
import argparse
from collections import defaultdict
import os

def count(revision_range):
    checkoutput=subprocess.check_output(["git", "log", revision_range]) #adds revision range over subprocess which lets you run git commands

    commitscount = defaultdict(int) #creates a dict of ints that just helps you easily count everyhting 

    for line in checkoutput.decode().splitlines(): #needs to call split lines, but may also need to call strifp
                if line.startswith("Date"): #if it starts with date, then we use it to count what happens 
                    Time = line.split()[-1]
                    commitscount[Time] +=1
    
    sortcommits = sorted(commitscount.items(), key = lambda item: int(item[0])) #use item[0] for the order 
        
    with open("tzdb-2012j-2024a.tzcountf", "w") as output_file: # opens everything and prints it as needed in the desired file
            for Time, count in sortcommits:
             print(f'{Time} {count}', file = output_file)

def main():
    parser = argparse.ArgumentParser(description= "counts how many commits there are on timezones") #parser that lets you have multiple arguments when needed because spec says can take anything from git log.
    parser.add_argument('revision_range', type =str, help = "commit revision range")


    args = parser.parse_args()
    
    if args.revision_range:
          count(args.revision_range)
    else:
          parser.error("enter valid range")
    
if __name__ == "__main__":
      main()
